// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------------------- //
// ParallelTFT_hsync_clk //
// --------------------- //

#define ParallelTFT_hsync_clk_wrap_target 0
#define ParallelTFT_hsync_clk_wrap 11

#define ParallelTFT_hsync_clk_offset_loop_hsync 0u

static const uint16_t ParallelTFT_hsync_clk_program_instructions[] = {
            //     .wrap_target
    0xe146, //  0: set    y, 6            side 0 [1] 
    0xf100, //  1: set    pins, 0         side 1 [1] 
    0xe12d, //  2: set    x, 13           side 0 [1] 
    0xf101, //  3: set    pins, 1         side 1 [1] 
    0x0143, //  4: jmp    x--, 3          side 0 [1] 
    0x1182, //  5: jmp    y--, 2          side 1 [1] 
    0xc100, //  6: irq    nowait 0        side 0 [1] 
    0xf14f, //  7: set    y, 15           side 1 [1] 
    0xe137, //  8: set    x, 23           side 0 [1] 
    0xd140, //  9: irq    clear 0         side 1 [1] 
    0x0149, // 10: jmp    x--, 9          side 0 [1] 
    0x1188, // 11: jmp    y--, 8          side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ParallelTFT_hsync_clk_program = {
    .instructions = ParallelTFT_hsync_clk_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config ParallelTFT_hsync_clk_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ParallelTFT_hsync_clk_wrap_target, offset + ParallelTFT_hsync_clk_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void ParallelTFT_hsync_clk_program_init(PIO pio, uint sm, uint offset, uint tft_hsync, uint tft_clk) {
    pio_sm_config c = ParallelTFT_hsync_clk_program_get_default_config(offset);
    sm_config_set_set_pins(&c, tft_hsync, 1);
    sm_config_set_sideset_pins(&c, tft_clk);
    // Set the pin direction to output at the PIO
    uint32_t both_pins = (1u << tft_hsync) | (1u << tft_clk);
    pio_sm_set_pindirs_with_mask(pio, sm, both_pins, both_pins);
    pio_sm_set_pins_with_mask(pio, sm, both_pins, both_pins);
    pio_gpio_init(pio, tft_hsync);
    pio_gpio_init(pio, tft_clk);
    float div = (float)clock_get_hz(clk_sys) / (2*1000000);
    sm_config_set_clkdiv(&c, div);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

// ----------------- //
// ParallelTFT_vsync //
// ----------------- //

#define ParallelTFT_vsync_wrap_target 0
#define ParallelTFT_vsync_wrap 9

#define ParallelTFT_vsync_offset_loop_vsync 0u

static const uint16_t ParallelTFT_vsync_program_instructions[] = {
            //     .wrap_target
    0xe142, //  0: set    y, 2                   [1] 
    0xe13e, //  1: set    x, 30                  [1] 
    0xd901, //  2: irq    nowait 1        side 1 [1] 
    0x2135, //  3: wait   0 pin, 21              [1] 
    0x0142, //  4: jmp    x--, 2                 [1] 
    0x0081, //  5: jmp    y--, 1                     
    0xd341, //  6: irq    clear 1         side 0 [3] 
    0xe12f, //  7: set    x, 15                  [1] 
    0x2235, //  8: wait   0 pin, 21              [2] 
    0x1f48, //  9: jmp    x--, 8          side 1 [7] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ParallelTFT_vsync_program = {
    .instructions = ParallelTFT_vsync_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config ParallelTFT_vsync_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ParallelTFT_vsync_wrap_target, offset + ParallelTFT_vsync_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void ParallelTFT_vsync_program_init(PIO pio, uint sm, uint offset, uint tft_vsync) {
    pio_sm_config c = ParallelTFT_vsync_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, tft_vsync);
    // Set the pin direction to output at the PIO
    pio_gpio_init(pio, tft_vsync);
    pio_sm_set_consecutive_pindirs(pio, sm, tft_vsync, 1, true);
    float div = (float)clock_get_hz(clk_sys) / (2*1000000);
    sm_config_set_clkdiv(&c, div);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
    }

#endif

// ---------------- //
// ParallelTFT_data //
// ---------------- //

#define ParallelTFT_data_wrap_target 2
#define ParallelTFT_data_wrap 7

static const uint16_t ParallelTFT_data_program_instructions[] = {
    0x80a0, //  0: pull   block                      
    0xa047, //  1: mov    y, osr                     
            //     .wrap_target
    0xa022, //  2: mov    x, y                       
    0x20c1, //  3: wait   1 irq, 1                   
    0x23c0, //  4: wait   1 irq, 0               [3] 
    0x8080, //  5: pull   noblock                    
    0x6110, //  6: out    pins, 16               [1] 
    0x0045, //  7: jmp    x--, 5                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ParallelTFT_data_program = {
    .instructions = ParallelTFT_data_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config ParallelTFT_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ParallelTFT_data_wrap_target, offset + ParallelTFT_data_wrap);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
#include "pico/stdlib.h"
#include <stdio.h>
static inline void ParallelTFT_data_program_init(PIO pio, uint sm, uint offset, uint tft_data) {
    pio_sm_config c = ParallelTFT_data_program_get_default_config(offset);
    // Set the pin direction to output at the PIO
    for (uint i = tft_data; i < tft_data + 16; i++){
        printf("GPIO %d init\n", i);
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, tft_data, 16, true);
    sm_config_set_out_pins(&c, tft_data, 16);
    float div = (float)clock_get_hz(clk_sys) / (2*1000000);
    sm_config_set_clkdiv(&c, div);
    sm_config_set_out_shift(&c, true, false, 16);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
    }

#endif

